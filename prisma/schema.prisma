generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String    @id @default(cuid()) @map("_id")
  name                       String
  email                      String    @unique
  emailVerified              Boolean   @default(false)
  image                      String?
  role                       String    @default("user")
  banned                     Boolean   @default(false)
  banReason                  String?
  banExpires                 Int? // Unix timestamp for ban expiration
  phoneNumber                String?
  phoneNumberVerified        Boolean   @default(false)
  pendingPhoneNumber         String? // For pending verification
  pendingPhoneVerificationId String? // For verification ID
  birthDate                  DateTime?
  gender                     Gender?
  profileImageKey            String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Auth related relations
  accounts Account[]
  sessions Session[]

  // App specific relations
  identityCard      IdentityCard?
  passenger         Passenger?
  driver            Driver?
  termsAcceptance   UserTermsAcceptance[]
  actionLogs        UserActionLog[]
  reviewsGiven      Review[]              @relation("ReviewGiven")
  reviewsReceived   Review[]              @relation("ReviewReceived")
  pushSubscriptions PushSubscription[]
  notifications     Notification[]
  supportTickets    SupportTicket[]
  assignedTickets   SupportTicket[]       @relation("AssignedTickets")
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model jwks {
  id         String   @id @default(cuid()) @map("_id")
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
}

model IdentityCard {
  id            String             @id @default(uuid())
  userId        String             @unique
  idNumber      Int
  frontFileKey  String
  backFileKey   String
  fileType      FileType
  status        VerificationStatus @default(PENDING)
  verifiedAt    DateTime?
  failureReason String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model TermsAndCondition {
  id            String   @id @default(uuid())
  version       String
  content       String
  effectiveDate DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  acceptances UserTermsAcceptance[]
}

model UserTermsAcceptance {
  id         String   @id @default(uuid())
  userId     String
  termsId    String
  acceptedAt DateTime @default(now())

  user  User              @relation(fields: [userId], references: [id])
  terms TermsAndCondition @relation(fields: [termsId], references: [id])

  @@unique([userId, termsId])
}

model Driver {
  id                   String      @id @default(uuid())
  userId               String      @unique
  averageRating        Float       @default(0)
  totalReviews         Int         @default(0)
  totalTrips           Int         @default(0)
  isEnabled            Boolean     @default(false)
  enabledAt            DateTime?
  disabledReason       String?
  lastEligibilityCheck DateTime    @default(now())

  // Información bancaria para pagos
  bankAlias            String?
  bankCbuOrCvu         String?     // CBU o CVU (22 dígitos)
  bankInfoVerified     Boolean     @default(false)
  bankInfoVerifiedAt   DateTime?

  licence              Licence?
  cars                 DriverCar[]
  payouts              DriverPayout[]
  user                 User        @relation(fields: [userId], references: [id])
}

model Licence {
  id            String             @id @default(uuid())
  driverId      String             @unique
  expiration    DateTime
  frontFileKey  String
  backFileKey   String
  fileType      FileType
  status        VerificationStatus @default(PENDING)
  verifiedAt    DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  failureReason String?

  driver Driver @relation(fields: [driverId], references: [id])
}

model Passenger {
  id            String          @id @default(uuid())
  userId        String          @unique
  averageRating Float           @default(0)
  totalReviews  Int             @default(0)
  totalTrips    Int             @default(0)
  trips         TripPassenger[]
  user          User            @relation(fields: [userId], references: [id])
}

model Brand {
  id        String     @id @default(uuid())
  name      String     @unique
  carModels CarModel[]
}

model CarModel {
  id                 String    @id @default(uuid())
  brandId            String
  model              String
  fuelType           FuelType?
  averageFuelConsume Float?
  cars               Car[]
  brand              Brand     @relation(fields: [brandId], references: [id])

  @@unique([brandId, model], name: "brandId_model")
  @@index([brandId])
}

model FuelPrice {
  id             String    @id @default(uuid())
  name           String
  fuelType       FuelType
  price          Float // Precio por litro/kWh
  regionCode     String? // Código de región o provincia (opcional, si los precios varían por región)
  effectiveDate  DateTime // Fecha desde la que aplica este precio
  expirationDate DateTime? // Fecha opcional hasta la que aplica
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([fuelType, isActive])
  @@index([fuelType, regionCode, effectiveDate])
  @@index([effectiveDate])
}

model Car {
  id           String   @id @default(uuid())
  plate        String   @unique
  year         Int
  carModelId   String
  insuredCarId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  carModel     CarModel      @relation(fields: [carModelId], references: [id])
  insuredCar   InsuredCar?   @relation(fields: [insuredCarId], references: [id])
  driverCars   DriverCar[]
  vehicleCards VehicleCard[]

  @@index([carModelId])
  @@index([insuredCarId])
}

model DriverCar {
  id             String   @id @default(uuid())
  driverId       String
  carId          String
  assignmentDate DateTime @default(now())

  driver       Driver        @relation(fields: [driverId], references: [id])
  car          Car           @relation(fields: [carId], references: [id])
  vehicleCards VehicleCard[] @relation("DriverCarVehicleCards")
  trips        Trip[]

  @@unique([driverId, carId])
  @@index([driverId])
  @@index([carId])
}

model VehicleCard {
  id             String             @id @default(uuid())
  carId          String
  driverCarId    String?
  cardType       CardType
  fileKey        String
  fileType       FileType
  expirationDate DateTime
  status         VerificationStatus @default(PENDING)
  verifiedAt     DateTime?
  failureReason  String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  car       Car        @relation(fields: [carId], references: [id])
  driverCar DriverCar? @relation("DriverCarVehicleCards", fields: [driverCarId], references: [id])

  @@unique([carId, cardType])
  @@index([carId, driverCarId])
}

model InsuredCar {
  id              String            @id @default(uuid())
  cars            Car[]
  currentPolicyId String?           @unique
  policyHistory   InsurancePolicy[]
  currentPolicy   InsurancePolicy?  @relation("CurrentPolicy", fields: [currentPolicyId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([currentPolicyId])
}

model InsurancePolicy {
  id            String             @id @default(uuid())
  insuredCarId  String
  insuranceId   String
  policyNumber  Int
  startDate     DateTime
  expireDate    DateTime
  fileKey       String
  fileType      FileType
  status        VerificationStatus @default(PENDING)
  verifiedAt    DateTime?
  failureReason String?
  createdAt     DateTime           @default(now())

  insuredCar    InsuredCar  @relation(fields: [insuredCarId], references: [id])
  insurance     Insurance   @relation(fields: [insuranceId], references: [id])
  currentForCar InsuredCar? @relation("CurrentPolicy")

  @@index([insuredCarId])
  @@index([insuranceId])
  @@index([insuredCarId, status])
}

model Insurance {
  id          String            @id @default(uuid())
  name        String
  insuredCars InsurancePolicy[]
}

model Trip {
  id          String @id @default(uuid())
  driverCarId String

  // Enhanced origin details
  originAddress   String? // Full formatted address
  originCity      String // City name
  originProvince  String // Province/state name
  originLatitude  Float? // Latitude coordinate
  originLongitude Float? // Longitude coordinate

  // Enhanced destination details
  destinationAddress   String? // Full formatted address
  destinationCity      String // City name
  destinationProvince  String // Province/state name
  destinationLatitude  Float? // Latitude coordinate
  destinationLongitude Float? // Longitude coordinate

  // Route information
  googleMapsUrl   String? // URL to Google Maps route
  date            DateTime
  originalDepartureTime DateTime? // Original scheduled departure time
  departureTime   DateTime
  price           Int
  distance        Float?
  duration        String? // Duration string from Google (e.g. "2h 15m")
  durationSeconds Int? // Duration in seconds for easier calculations

  // Toll information
  hasTolls           Boolean @default(false)
  tollEstimatedPrice Float? // Estimated toll price

  // Trip details
  availableSeats          Int
  remainingSeats          Int
  status                  TripStatus       @default(PENDING)
  isFull                  Boolean          @default(false)
  priceGuide              Float?
  maximumPrice            Float?
  serviceFee              Float?
  autoApproveReservations Boolean          @default(false)
  luggageAllowance        LuggageAllowance @default(MEDIUM)
  allowPets               Boolean          @default(false)
  allowChildren           Boolean          @default(true)
  smokingAllowed          Boolean          @default(false)
  additionalNotes         String?
  categoryId              String?
  chatRoomId              String?          @unique
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

  driverCar     DriverCar       @relation(fields: [driverCarId], references: [id])
  passengers    TripPassenger[]
  reviews       Review[]
  category      TripCategory?   @relation(fields: [categoryId], references: [id])
  cancellations Cancellation[]
  driverPayout  DriverPayout?

  @@index([driverCarId])
  @@index([date, status])
  @@index([categoryId])
}

model TripPassenger {
  id                 String            @id @default(uuid())
  tripId             String
  passengerId        String
  reservationStatus  ReservationStatus @default(PENDING_APPROVAL)
  seatsReserved      Int               @default(1)
  totalPrice         Float
  reservationMessage String?
  approvedAt         DateTime? 
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  trip         Trip          @relation(fields: [tripId], references: [id])
  passenger    Passenger     @relation(fields: [passengerId], references: [id])
  payment      Payment?
  cancellation Cancellation?

  @@unique([tripId, passengerId])
  @@index([tripId])
  @@index([passengerId])
  @@index([reservationStatus])
}

model Review {
  id           String       @id @default(uuid())
  tripId       String
  reviewerId   String
  reviewedId   String
  revieweeType RevieweeType
  rating       Float
  comments     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  trip     Trip @relation(fields: [tripId], references: [id])
  reviewer User @relation("ReviewGiven", fields: [reviewerId], references: [id])
  reviewed User @relation("ReviewReceived", fields: [reviewedId], references: [id])

  @@index([tripId])
  @@index([reviewerId])
  @@index([reviewedId])
}

model Payment {
  id              String        @id @default(uuid())
  tripPassengerId String        @unique
  amount          Float
  currency        String        @default("ARS")
  status          PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  completedAt     DateTime?

  tripPassenger TripPassenger @relation(fields: [tripPassengerId], references: [id])
  bankTransfer  BankTransfer?
  refund        Refund?

  @@index([status])
  @@index([createdAt])
  @@index([paymentMethod, status])
}

model BankTransfer {
  id            String    @id @default(uuid())
  paymentId     String    @unique
  accountOwner  String?
  transferDate  DateTime?
  proofFileKey  String?
  verifiedAt    DateTime?
  verifiedBy    String?
  failureReason String?

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Refund {
  id                 String       @id @default(cuid())
  paymentId          String       @unique
  refundAmount       Float // Monto reembolsado al pasajero
  driverCompensation Float        @default(0) // Compensación al conductor
  serviceFeeRetained Float // Tarifa de servicio retenida por Tengo Lugar
  refundStatus       RefundStatus // PROCESSING, COMPLETED, FAILED
  refundType         RefundType // FULL_REFUND, PARTIAL_75, PARTIAL_50, NO_REFUND
  processedAt        DateTime? // Cuándo se procesó el reembolso
  completedAt        DateTime? // Cuándo se completó
  failureReason      String? // Si falló, por qué
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  payment Payment @relation(fields: [paymentId], references: [id])

  @@index([refundStatus])
  @@index([paymentId])
}

model Cancellation {
  id                   String       @id @default(cuid())
  // IMPORTANTE: Solo UNO de estos dos campos debe tener valor
  // - Si cancelledBy === PASSENGER → usar tripPassengerId
  // - Si cancelledBy === DRIVER → usar tripId
  tripPassengerId      String?      @unique
  tripId               String?
  cancelledBy          CancelledBy // PASSENGER, DRIVER
  reason               String // Texto libre - motivo de cancelación
  hoursBeforeDeparture Float // Horas de anticipación
  refundPercentage     Float // % de reembolso aplicado (solo cuando cancelledBy === PASSENGER)
  cancelledAt          DateTime     @default(now())

  tripPassenger TripPassenger? @relation(fields: [tripPassengerId], references: [id])
  trip          Trip?          @relation(fields: [tripId], references: [id])

  @@index([cancelledBy])
  @@index([tripPassengerId])
  @@index([tripId])
}

model TripCategory {
  id          String    @id @default(uuid())
  feePolicyId String
  name        String
  description String?
  trips       Trip[]
  feePolicy   FeePolicy @relation(fields: [feePolicyId], references: [id])

  @@index([feePolicyId])
}

model FeePolicy {
  id             String        @id @default(uuid())
  name           String
  description    String?
  serviceFeeRate Float
  serviceFeeType FeePolicyType @default(PERCENTAGE)
  minimumFee     Float?
  maximumFee     Float?
  isDefault      Boolean       @default(false)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  tripCategories TripCategory[]
}

model ErrorLog {
  id        String   @id @default(cuid())
  origin    String
  code      String
  message   String
  details   String?
  createdAt DateTime @default(now())

  @@index([origin, code, createdAt])
}

model UserActionLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   Json?
  status    String
  metadata  Json
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, action, createdAt])
}

model PushSubscription {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, read])
}

model SupportTicket {
  id           String        @id @default(uuid())
  ticketNumber String        @unique
  userId       String

  category     TicketCategory
  subject      String
  description  String        @db.Text
  status       TicketStatus  @default(OPEN)

  assignedToAdminId String?
  resolution        String?   @db.Text

  createdAt  DateTime @default(now())
  resolvedAt DateTime?

  user          User  @relation(fields: [userId], references: [id])
  assignedAdmin User? @relation("AssignedTickets", fields: [assignedToAdminId], references: [id])

  @@index([userId, status])
  @@index([status, createdAt])
}

model DriverPayout {
  id           String        @id @default(uuid())
  tripId       String        @unique
  driverId     String

  // Montos
  totalEarned  Float         // Total ganado por el viaje (sin descontar fee)
  serviceFee   Float         // Fee de Tengo Lugar
  payoutAmount Float         // Total a pagar al conductor (totalEarned - serviceFee)
  currency     String        @default("ARS")

  // Estado
  status       PayoutStatus  @default(PENDING)
  payoutMethod PaymentMethod @default(BANK_TRANSFER)

  // Notas y auditoría
  notes        String?
  processedBy  String?       // Admin que procesó el pago

  // Timestamps
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  processedAt  DateTime?     // Cuándo se procesó la transferencia
  completedAt  DateTime?     // Cuándo se completó

  trip          Trip           @relation(fields: [tripId], references: [id])
  driver        Driver         @relation(fields: [driverId], references: [id])
  transferProof TransferProof?

  @@index([driverId, status])
  @@index([status, createdAt])
  @@index([tripId])
}

model TransferProof {
  id             String   @id @default(uuid())
  driverPayoutId String   @unique
  proofFileKey   String   // S3 key del comprobante
  transferDate   DateTime // Fecha de la transferencia
  transferredBy  String   // ID del admin que realizó la transferencia
  notes          String?
  createdAt      DateTime @default(now())

  driverPayout DriverPayout @relation(fields: [driverPayoutId], references: [id], onDelete: Cascade)
}

enum CardType {
  GREEN
  BLUE
}

enum FuelType {
  NAFTA
  DIESEL
  GNC
  ELECTRICO
  HIBRIDO
}

enum FileType {
  PDF
  IMAGE
}

enum Gender {
  MASCULINO
  FEMENINO
  NO_BINARIO
}

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

enum TripStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING_APPROVAL // Esperando aprobación del conductor
  WAITLISTED // Trip full but passenger is on waiting list
  APPROVED // Aprobado, pendiente de pago
  REJECTED // Rechazado por conductor
  CONFIRMED // Pagado y confirmado - LISTO PARA VIAJAR
  CANCELLED_EARLY // Cancelado con >24h (reembolso completo)
  CANCELLED_MEDIUM // Cancelado 12-24h (reembolso 75%)
  CANCELLED_LATE // Cancelado <12h (reembolso 50%)
  CANCELLED_BY_DRIVER_EARLY // Cancelado por conductor >48h (sin penalidad)
  CANCELLED_BY_DRIVER_LATE // Cancelado por conductor <48h (con penalidad)
  NO_SHOW // No se presentó (sin reembolso)
  COMPLETED // Viaje completado exitosamente
  EXPIRED // Reserva expirada (no pagada a tiempo)
}

enum PaymentStatus {
  PENDING // Payment pending
  PROCESSING // Payment processing
  COMPLETED // Payment completed
  FAILED // Payment failed
  REFUNDED // Payment refunded
}

enum RevieweeType {
  DRIVER
  PASSENGER
}

enum FeePolicyType {
  PERCENTAGE // Apply a percentage on the price
  FIXED_AMOUNT // Fixed amount per reservation
  PER_SEAT // Fixed amount per seat
}

enum LuggageAllowance {
  SMALL // Only small hand luggage (backpack, handbag)
  MEDIUM // Medium luggage (cabin luggage)
  LARGE // Large suitcases
  EXTRA // Extra or bulky luggage (sports, instruments, etc.)
}

enum ChatRoomStatus {
  ACTIVE
  ARCHIVED
}

enum ChatRoomRole {
  DRIVER
  PASSENGER
  ADMIN
}

enum MessageContentType {
  TEXT
  IMAGE
  LOCATION
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum RefundStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum RefundType {
  NO_REFUND
  FULL_REFUND
  PARTIAL_REFUND_75
  PARTIAL_REFUND_50
}

enum CancelledBy {
  PASSENGER
  DRIVER
}

enum PaymentMethod {
  BANK_TRANSFER
  MERCADO_PAGO
}

enum PayoutStatus {
  PENDING       // Esperando procesamiento
  PROCESSING    // En proceso de transferencia
  COMPLETED     // Transferencia completada
  FAILED        // Transferencia fallida
  ON_HOLD       // En espera (verificación pendiente)
}

enum TicketCategory {
  PAYMENT_ISSUE
  TRIP_ISSUE
  ACCOUNT_ISSUE
  OTHER
}

enum TicketStatus {
  OPEN
  RESOLVED
}
