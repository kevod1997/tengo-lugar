generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  birthDate                  DateTime?
  email                      String                @unique
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  profileImageKey            String?
  gender                     Gender?
  emailVerified              Boolean               @default(false)
  image                      String?
  name                       String
  banExpires                 Int?
  banReason                  String?
  banned                     Boolean               @default(false)
  role                       String                @default("user")
  id                         String                @id @default(cuid()) @map("_id")
  phoneNumber                String?
  phoneNumberVerified        Boolean               @default(false)
  pendingPhoneNumber         String?
  pendingPhoneVerificationId String?
  accounts                   Account[]
  driver                     Driver?
  identityCard               IdentityCard?
  notifications              Notification[]
  passenger                  Passenger?
  pushSubscriptions          PushSubscription[]
  reviewsReceived            Review[]              @relation("ReviewReceived")
  reviewsGiven               Review[]              @relation("ReviewGiven")
  sessions                   Session[]
  assignedTickets            SupportTicket[]       @relation("AssignedTickets")
  supportTickets             SupportTicket[]
  actionLogs                 UserActionLog[]
  termsAcceptance            UserTermsAcceptance[]
  bankAccount                BankAccount?
}

model Session {
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  id             String   @id @default(cuid()) @map("_id")
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId                String
  providerId            String
  refreshToken          String?
  accessToken           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  id                    String    @id @default(cuid()) @map("_id")
  accessTokenExpiresAt  DateTime?
  accountId             String
  password              String?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  identifier String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(cuid()) @map("_id")
  expiresAt  DateTime
  value      String
}

model jwks {
  id         String   @id @default(cuid()) @map("_id")
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
}

model IdentityCard {
  id            String             @id @default(uuid())
  userId        String             @unique
  frontFileKey  String
  backFileKey   String
  verifiedAt    DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  fileType      FileType
  idNumber      Int
  failureReason String?
  status        VerificationStatus @default(PENDING)
  user          User               @relation(fields: [userId], references: [id])
}

model TermsAndCondition {
  id            String                @id @default(uuid())
  version       String
  content       String
  effectiveDate DateTime
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  acceptances   UserTermsAcceptance[]
}

model UserTermsAcceptance {
  id         String            @id @default(uuid())
  userId     String
  termsId    String
  acceptedAt DateTime          @default(now())
  terms      TermsAndCondition @relation(fields: [termsId], references: [id])
  user       User              @relation(fields: [userId], references: [id])

  @@unique([userId, termsId])
}

model Driver {
  id                   String         @id @default(uuid())
  userId               String         @unique
  averageRating        Float          @default(0)
  totalReviews         Int            @default(0)
  totalTrips           Int            @default(0)
  disabledReason       String?
  enabledAt            DateTime?
  isEnabled            Boolean        @default(false)
  lastEligibilityCheck DateTime       @default(now())
  user                 User           @relation(fields: [userId], references: [id])
  cars                 DriverCar[]
  payouts              DriverPayout[]
  licence              Licence?
}

model Licence {
  id            String             @id @default(uuid())
  driverId      String             @unique
  expiration    DateTime
  frontFileKey  String
  backFileKey   String
  fileType      FileType
  status        VerificationStatus @default(PENDING)
  verifiedAt    DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  failureReason String?
  driver        Driver             @relation(fields: [driverId], references: [id])
}

model Passenger {
  id            String          @id @default(uuid())
  userId        String          @unique
  averageRating Float           @default(0)
  totalReviews  Int             @default(0)
  totalTrips    Int             @default(0)
  user          User            @relation(fields: [userId], references: [id])
  trips         TripPassenger[]
}

model Brand {
  id        String     @id @default(uuid())
  name      String     @unique
  carModels CarModel[]
}

model CarModel {
  id                 String    @id @default(uuid())
  brandId            String
  model              String
  fuelType           FuelType?
  averageFuelConsume Float?
  cars               Car[]
  brand              Brand     @relation(fields: [brandId], references: [id])

  @@unique([brandId, model], name: "brandId_model")
  @@index([brandId])
}

model FuelPrice {
  id             String    @id @default(uuid())
  fuelType       FuelType
  price          Float
  regionCode     String?
  effectiveDate  DateTime
  expirationDate DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String

  @@index([fuelType, isActive])
  @@index([fuelType, regionCode, effectiveDate])
  @@index([effectiveDate])
}

model Car {
  id           String        @id @default(uuid())
  plate        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  carModelId   String
  insuredCarId String?
  year         Int
  carModel     CarModel      @relation(fields: [carModelId], references: [id])
  insuredCar   InsuredCar?   @relation(fields: [insuredCarId], references: [id])
  driverCars   DriverCar[]
  vehicleCards VehicleCard[]

  @@index([carModelId])
  @@index([insuredCarId])
}

model DriverCar {
  id             String        @id @default(uuid())
  assignmentDate DateTime      @default(now())
  driverId       String
  carId          String
  car            Car           @relation(fields: [carId], references: [id])
  driver         Driver        @relation(fields: [driverId], references: [id])
  trips          Trip[]
  vehicleCards   VehicleCard[] @relation("DriverCarVehicleCards")

  @@unique([driverId, carId])
  @@index([driverId])
  @@index([carId])
}

model VehicleCard {
  id             String             @id @default(uuid())
  carId          String
  cardType       CardType
  fileKey        String
  fileType       FileType
  expirationDate DateTime
  status         VerificationStatus @default(PENDING)
  verifiedAt     DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  failureReason  String?
  driverCarId    String?
  car            Car                @relation(fields: [carId], references: [id])
  driverCar      DriverCar?         @relation("DriverCarVehicleCards", fields: [driverCarId], references: [id])

  @@unique([carId, cardType])
  @@index([carId, driverCarId])
}

model InsuredCar {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  currentPolicyId String?           @unique
  cars            Car[]
  policyHistory   InsurancePolicy[]
  currentPolicy   InsurancePolicy?  @relation("CurrentPolicy", fields: [currentPolicyId], references: [id])

  @@index([currentPolicyId])
}

model InsurancePolicy {
  id            String             @id @default(uuid())
  policyNumber  Int
  startDate     DateTime
  expireDate    DateTime
  fileKey       String
  fileType      FileType
  status        VerificationStatus @default(PENDING)
  verifiedAt    DateTime?
  failureReason String?
  createdAt     DateTime           @default(now())
  insuredCarId  String
  insuranceId   String
  insurance     Insurance          @relation(fields: [insuranceId], references: [id])
  insuredCar    InsuredCar         @relation(fields: [insuredCarId], references: [id])
  currentForCar InsuredCar?        @relation("CurrentPolicy")

  @@index([insuredCarId])
  @@index([insuranceId])
  @@index([insuredCarId, status])
}

model Insurance {
  id          String            @id @default(uuid())
  name        String
  insuredCars InsurancePolicy[]
}

model Trip {
  id                      String           @id @default(uuid())
  driverCarId             String
  date                    DateTime
  departureTime           DateTime
  price                   Int
  distance                Float?
  availableSeats          Int
  status                  TripStatus       @default(PENDING)
  isFull                  Boolean          @default(false)
  priceGuide              Float?
  maximumPrice            Float?
  serviceFee              Float?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  autoApproveReservations Boolean          @default(false)
  luggageAllowance        LuggageAllowance @default(MEDIUM)
  allowPets               Boolean          @default(false)
  allowChildren           Boolean          @default(true)
  smokingAllowed          Boolean          @default(false)
  additionalNotes         String?
  categoryId              String?
  destinationAddress      String?
  destinationCity         String
  destinationLatitude     Float?
  destinationLongitude    Float?
  destinationProvince     String
  duration                String?
  durationSeconds         Int?
  googleMapsUrl           String?
  hasTolls                Boolean          @default(false)
  originAddress           String?
  originCity              String
  originLatitude          Float?
  originLongitude         Float?
  originProvince          String
  tollEstimatedPrice      Float?
  remainingSeats          Int
  chatRoomId              String?          @unique
  originalDepartureTime   DateTime?
  cancellations           Cancellation[]
  driverPayout            DriverPayout?
  reviews                 Review[]
  category                TripCategory?    @relation(fields: [categoryId], references: [id])
  driverCar               DriverCar        @relation(fields: [driverCarId], references: [id])
  passengers              TripPassenger[]

  @@index([driverCarId])
  @@index([date, status])
  @@index([categoryId])
}

model TripPassenger {
  id                 String            @id @default(uuid())
  tripId             String
  passengerId        String
  reservationStatus  ReservationStatus @default(PENDING_APPROVAL)
  seatsReserved      Int               @default(1)
  totalPrice         Float
  reservationMessage String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  approvedAt         DateTime?
  cancellation       Cancellation?
  payment            Payment?
  passenger          Passenger         @relation(fields: [passengerId], references: [id])
  trip               Trip              @relation(fields: [tripId], references: [id])

  @@unique([tripId, passengerId])
  @@index([tripId])
  @@index([passengerId])
  @@index([reservationStatus])
}

model Review {
  id           String       @id @default(uuid())
  tripId       String
  reviewerId   String
  reviewedId   String
  revieweeType RevieweeType
  rating       Float
  comments     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  reviewed     User         @relation("ReviewReceived", fields: [reviewedId], references: [id])
  reviewer     User         @relation("ReviewGiven", fields: [reviewerId], references: [id])
  trip         Trip         @relation(fields: [tripId], references: [id])

  @@index([tripId])
  @@index([reviewerId])
  @@index([reviewedId])
}

model Payment {
  id              String        @id @default(uuid())
  tripPassengerId String        @unique
  currency        String        @default("ARS")
  status          PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  completedAt     DateTime?
  paymentMethod   PaymentMethod
  serviceFee      Float
  totalAmount     Float
  bankTransfer    BankTransfer?
  tripPassenger   TripPassenger @relation(fields: [tripPassengerId], references: [id])
  refund          Refund?

  @@index([status])
  @@index([createdAt])
  @@index([paymentMethod, status])
}

model BankTransfer {
  id            String    @id @default(uuid())
  paymentId     String    @unique
  accountOwner  String?
  transferDate  DateTime?
  proofFileKey  String?
  verifiedAt    DateTime?
  verifiedBy    String?
  failureReason String?
  payment       Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Refund {
  id                 String       @id @default(cuid())
  paymentId          String       @unique
  refundAmount       Float
  driverCompensation Float        @default(0)
  serviceFeeRetained Float
  refundStatus       RefundStatus
  refundType         RefundType
  processedAt        DateTime?
  completedAt        DateTime?
  failureReason      String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  payment            Payment      @relation(fields: [paymentId], references: [id])

  @@index([refundStatus])
  @@index([paymentId])
}

model Cancellation {
  id                   String         @id @default(cuid())
  tripPassengerId      String?        @unique
  tripId               String?
  cancelledBy          CancelledBy
  reason               String
  hoursBeforeDeparture Float
  refundPercentage     Float
  cancelledAt          DateTime       @default(now())
  trip                 Trip?          @relation(fields: [tripId], references: [id])
  tripPassenger        TripPassenger? @relation(fields: [tripPassengerId], references: [id])

  @@index([cancelledBy])
  @@index([tripPassengerId])
  @@index([tripId])
}

model TripCategory {
  id          String    @id @default(uuid())
  feePolicyId String
  name        String
  description String?
  trips       Trip[]
  feePolicy   FeePolicy @relation(fields: [feePolicyId], references: [id])

  @@index([feePolicyId])
}

model FeePolicy {
  id             String         @id @default(uuid())
  name           String
  description    String?
  serviceFeeRate Float
  serviceFeeType FeePolicyType  @default(PERCENTAGE)
  minimumFee     Float?
  maximumFee     Float?
  isDefault      Boolean        @default(false)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tripCategories TripCategory[]
}

model ErrorLog {
  id        String   @id @default(cuid())
  origin    String
  code      String
  message   String
  details   String?
  createdAt DateTime @default(now())

  @@index([origin, code, createdAt])
}

model UserActionLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   Json?
  status    String
  metadata  Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, action, createdAt])
}

model PushSubscription {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  link      String?
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, read])
}

model SupportTicket {
  id                String         @id @default(uuid())
  ticketNumber      String         @unique
  userId            String
  category          TicketCategory
  subject           String
  description       String
  status            TicketStatus   @default(OPEN)
  assignedToAdminId String?
  resolution        String?
  createdAt         DateTime       @default(now())
  resolvedAt        DateTime?
  assignedAdmin     User?          @relation("AssignedTickets", fields: [assignedToAdminId], references: [id])
  user              User           @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([status, createdAt])
}

model DriverPayout {
  id                      String         @id @default(uuid())
  tripId                  String         @unique
  driverId                String
  payoutAmount            Float
  totalReceived           Float?
  serviceFee              Float?
  lateCancellationPenalty Float?
  currency                String         @default("ARS")
  status                  PayoutStatus   @default(PENDING)
  payoutMethod            PaymentMethod  @default(BANK_TRANSFER)
  notes                   String?
  processedBy             String?
  proofFileKey            String?
  transferDate            DateTime?
  transferredBy           String?
  transferNotes           String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  processedAt             DateTime?
  completedAt             DateTime?
  driver                  Driver         @relation(fields: [driverId], references: [id])
  trip                    Trip           @relation(fields: [tripId], references: [id])

  @@index([driverId, status])
  @@index([status, createdAt])
  @@index([tripId])
}

model BankAccount {
  id     String @id @default(uuid())
  userId String @unique

  // Datos bancarios
  bankAlias    String
  bankCbuOrCvu String? // Obligatorio, validado con Luhn
  accountType  BankAccountType?
  accountOwner String // Nombre del titular

  // Verificación (por admin)
  isVerified Boolean   @default(false)
  verifiedAt DateTime?
  verifiedBy String? // Admin userId que verificó

  // Auditoría
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isVerified])
}

enum BankAccountType {
  CBU
  CVU
}

enum CardType {
  GREEN
  BLUE
}

enum FuelType {
  NAFTA
  DIESEL
  GNC
  ELECTRICO
  HIBRIDO
}

enum FileType {
  PDF
  IMAGE
}

enum Gender {
  MASCULINO
  FEMENINO
  NO_BINARIO
}

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

enum TripStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING_APPROVAL
  WAITLISTED
  APPROVED
  REJECTED
  CONFIRMED
  CANCELLED_EARLY
  CANCELLED_MEDIUM
  CANCELLED_LATE
  CANCELLED_BY_DRIVER_EARLY
  CANCELLED_BY_DRIVER_LATE
  NO_SHOW
  COMPLETED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum RevieweeType {
  DRIVER
  PASSENGER
}

enum FeePolicyType {
  PERCENTAGE
  FIXED_AMOUNT
  PER_SEAT
}

enum LuggageAllowance {
  SMALL
  MEDIUM
  LARGE
  EXTRA
}

enum ChatRoomStatus {
  ACTIVE
  ARCHIVED
}

enum ChatRoomRole {
  DRIVER
  PASSENGER
  ADMIN
}

enum MessageContentType {
  TEXT
  IMAGE
  LOCATION
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum RefundStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum RefundType {
  NO_REFUND
  FULL_REFUND
  PARTIAL_REFUND_75
  PARTIAL_REFUND_50
}

enum CancelledBy {
  PASSENGER
  DRIVER
}

enum PaymentMethod {
  BANK_TRANSFER
  MERCADO_PAGO
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  ON_HOLD
  CANCELLED
}

enum TicketCategory {
  PAYMENT_ISSUE
  TRIP_ISSUE
  ACCOUNT_ISSUE
  OTHER
}

enum TicketStatus {
  OPEN
  RESOLVED
}
